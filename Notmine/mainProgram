import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;

/**
 * This program will establish a connection between the server and client
 * to accept a request for a file from the server, it will then return that
 * file if the request is valid and the file exists in the specified directory.
 * Essentially, it displays the requested file within the web browser. For the
 * sake of this assignment, it works with your local computer as the host, and
 * the designated root directory which you must edit before running the program.
 * 
 * To run, please first update the rootDirectory variable below to be the root
 * directory on your local computer that you wish to access files from. Then,
 * please run the program and open a web browser page and enter the following URL.
 * It is important to enter a valid file path from your root directory in place of
 * the "(path of file)".
 * </p>
 * http://localhost:50505/(path of file)
 * </p>
 * 
 * 
 * @author (removed due to assignment requirements)
 *
 */
public class mainProgram {
	
	//
	// **IMPORTANT**
	// Please edit the rootDirectory variable to your desired root directory folder
	// on your local computer for testing. You can then input the file path of any
	// file within this directory in the URL of the web browser as explained above.
	// **IMPORTANT**
	//
	private final static String rootDirectory = "ENTER YOUR LOCAL ROOT DIRECTORY HERE";

	private final static int LISTENING_PORT = 50505;
	
	private static void sendFile(File file, OutputStream socketOut) throws
	  IOException {
	    InputStream in = new BufferedInputStream(new FileInputStream(file));
	    OutputStream out = new BufferedOutputStream(socketOut);
	    while (true) {
	      int x = in.read(); // read one byte from file
	      if (x < 0)
	         break; // end of file reached
	      out.write(x);  // write the byte to the socket
	   }
	   out.flush();
	}
	
	private static String getFileType(String fileName) {
        int pos = fileName.lastIndexOf('.');
        if (pos < 0)  // no file extension in name
            return "x-application/x-unknown";
        String ext = fileName.substring(pos+1).toLowerCase();
        if (ext.equals("txt")) return "text/plain";
        else if (ext.equals("html")) return "text/html";
        else if (ext.equals("htm")) return "text/html";
        else if (ext.equals("css")) return "text/css";
        else if (ext.equals("js")) return "text/javascript";
        else if (ext.equals("java")) return "text/x-java";
        else if (ext.equals("jpeg")) return "image/jpeg";
        else if (ext.equals("jpg")) return "image/jpeg";
        else if (ext.equals("png")) return "image/png";
        else if (ext.equals("gif")) return "image/gif";
        else if (ext.equals("ico")) return "image/x-icon";
        else if (ext.equals("class")) return "application/java-vm";
        else if (ext.equals("jar")) return "application/java-archive";
        else if (ext.equals("zip")) return "application/zip";
        else if (ext.equals("xml")) return "application/xml";
        else if (ext.equals("xhtml")) return"application/xhtml+xml";
        else return "x-application/x-unknown";
           // Note:  x-application/x-unknown  is something made up;
           // it will probably make the browser offer to save the file.
     }
	
	/**
	 * This can be called to display specific error messages on the web browser
	 * based on the type of error encountered. Sends a simple HTML message back.
	 * 
	 * @param errorCode stated code to select which error message to display
	 * @param socketOut the outputStream where the error code and message should be sent
	 */
	static void sendErrorResponse(int errorCode, OutputStream socketOut) {
		PrintWriter errorOutput = new PrintWriter(socketOut);
		switch(errorCode) {
		case 400:	errorOutput.print("HTTP/1.1 400 Bad Request\r\n");
					errorOutput.print("Connection: close\r\n");
					errorOutput.print("Content-Type: text/html\r\n");
					errorOutput.print("\r\n");
					errorOutput.print("<html><head><title>Error</title></head><body>\n"
							+ "<h2>Error: 400 Bad Request</h2>\n"
							+ "<p>The syntax of the request is not valid.</p>\n"
							+ "</body></html>\r\n");
					errorOutput.flush();
					break;
		case 403:	errorOutput.print("HTTP/1.1 403 Forbidden\r\n");
					errorOutput.print("Connection: close\r\n");
					errorOutput.print("Content-Type: text/html\r\n");
					errorOutput.print("\r\n");
					errorOutput.print("<html><head><title>Error</title></head><body>\n"
							+ "<h2>Error: 403 Forbidden</h2>\n"
							+ "<p>You do not have permission to access this file.</p>\n"
							+ "</body></html>\r\n");
					errorOutput.flush();
					break;
		case 404: 	errorOutput.print("HTTP/1.1 404 Not Found\r\n");
					errorOutput.print("Connection: close\r\n");
					errorOutput.print("Content-Type: text/html\r\n");
					errorOutput.print("\r\n");
					errorOutput.print("<html><head><title>Error</title></head><body>\n"
							+ "<h2>Error: 404 Not Found</h2>\n"
							+ "<p>The resource that you requested does not exist on this server.</p>\n"
							+ "</body></html>\r\n");
					errorOutput.flush();
					break;
		case 500: 	errorOutput.print("HTTP/1.1 500 Internal Server Error\r\n");
					errorOutput.print("Connection: close\r\n");
					errorOutput.print("Content-Type: text/html\r\n");
					errorOutput.print("\r\n");
					errorOutput.print("<html><head><title>Error</title></head><body>\n"
							+ "<h2>Error: 500 Internal Server Error</h2>\n"
							+ "<p>There was an unexpected error.</p>\n"
							+ "</body></html>\r\n");
					errorOutput.flush();
					break;
		case 501:	errorOutput.print("HTTP/1.1 501 Not Implemented\r\n");
					errorOutput.print("Connection: close\r\n");
					errorOutput.print("Content-Type: text/html\r\n");
					errorOutput.print("\r\n");
					errorOutput.print("<html><head><title>Error</title></head><body>\n"
							+ "<h2>Error: 501 Not Implemented</h2>\n"
							+ "<p>The method in the request is not valid, expected 'GET'.</p>\n"
							+ "</body></html>\r\n");
					errorOutput.flush();
					break;
		}
	}

	
	
	private static void handleConnection(Socket connection) {
		try {
			Scanner in = new Scanner(connection.getInputStream());
				while (true) {
				if (!in.hasNextLine())
					break;
				String line = in.nextLine();
				if (line.trim().length() == 0) {
					sendErrorResponse(400, connection.getOutputStream());
					break;
				}
				String[] lineParts = line.split(" ");
				if(!lineParts[0].equalsIgnoreCase("get")) {
					sendErrorResponse(501, connection.getOutputStream());
					break;
				}
				String connectionType = "";
				if(lineParts[2].equalsIgnoreCase("HTTP/1.1")) {
					connectionType = "HTTP/1.1";
				} else if(lineParts[2].equalsIgnoreCase("HTTP/1.0")) {
					connectionType = "HTTP/1.0";
				}else {
					break;
				}
				String filePath = lineParts[1];
				File file = new File(rootDirectory + filePath);
				if(!file.exists()) {
					sendErrorResponse(404, connection.getOutputStream());
					break;
				}
				if(!file.canRead()) {
					sendErrorResponse(403, connection.getOutputStream());
					break;
				}
				PrintWriter outputPrint = new PrintWriter(connection.getOutputStream());
				outputPrint.print(connectionType + "200 OK\r\n");
				outputPrint.print("Connection: close\r\n");
				outputPrint.print("Content-Type: " + getFileType(filePath) + "\r\n");
				outputPrint.print("Content-Length: " + file.length() + "\r\n");
				outputPrint.print("\r\n");
				outputPrint.flush();
				sendFile(file, connection.getOutputStream());
			}
		}
		catch (Exception e) {
			System.out.println("Error while communicating with client: " + e);
		}
		finally {
			try {
				connection.close();
			}
			catch (Exception e) {
			}
			System.out.println("Connection closed.");
		}
	}
	
	/**
	 * A simple nested classed to provide multi-thread capabilities
	 * to this server. 
	 * 
	 * @author (removed due to assignment requirements)
	 *
	 */
    private static class ConnectionThread extends Thread {
        Socket connection;
        ConnectionThread(Socket connection) {
           this.connection = connection;
        }
        public void run() {
           handleConnection(connection);
        }
     }
    
	public static void main(String[] args) {
        ServerSocket serverSocket;
        try {
            serverSocket = new ServerSocket(LISTENING_PORT);
        }
        catch (Exception e) {
            System.out.println("Failed to create listening socket.");
            return;
        }
        System.out.println("Listening on port " + LISTENING_PORT);
        try {
            while (true) {
                Socket connection = serverSocket.accept();
                System.out.println("\nConnection from "
                        + connection.getRemoteSocketAddress());
                ConnectionThread thread = new ConnectionThread(connection);
                thread.start();
            }
        }
        catch (Exception e) {
            System.out.println("Server socket shut down unexpectedly!");
            System.out.println("Error: " + e);
            System.out.println("Exiting.");
        }
    }
}